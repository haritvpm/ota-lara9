(()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,n,o){return(n=function(t){var n=function(t,n){if("object"!==e(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var r=o.call(t,n||"default");if("object"!==e(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(t)}(t,"string");return"symbol"===e(n)?n:String(n)}(n))in t?Object.defineProperty(t,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[n]=o,t}navigator.sayswho=function(){var e,t=navigator.userAgent,n=t.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i)||[];return/trident/i.test(n[1])?"IE "+((e=/\brv[ :]+(\d+)/g.exec(t)||[])[1]||""):"Chrome"===n[1]&&null!=(e=t.match(/\b(OPR|Edge)\/(\d+)/))?e.slice(1).join(" ").replace("OPR","Opera"):(n=n[2]?[n[1],n[2]]:[navigator.appName,navigator.appVersion,"-?"],null!=(e=t.match(/version\/(\d+)/i))&&n.splice(1,1,e[1]),n.join(" "))}();var n=navigator.userAgent.toLowerCase().indexOf("windows nt 5.1")>0;Vue.use(VueSweetAlert.default);new Vue({el:"#app",data:{agreechecked:!1,needspostingchecked:!1,approvaltext:malkla+" കേരള നിയമസഭയുടെ  "+sessionnumber+"-ാം സമ്മേളനത്തോടനുബന്ധിച്ച് അധികജോലിക്കു നിയോഗിക്കപ്പെട്ട ജീവനക്കാർക്ക്  ഓവർടൈം അലവൻസ് അനുവദിക്കുന്നതിനുള്ള ഈ ഓവർടൈം അലവൻസ്   സ്റ്റേറ്റ്മെന്റ്,   ഓവർടൈം അലവൻസ് അനുവദിക്കുന്നതിനായുള്ള നിലവിലെ സർക്കാർ ഉത്തരവിൽ  നിഷ്കർഷിച്ചിരിക്കുന്ന  നിബന്ധനകൾ  പാലിച്ചു തന്നെയാണ്  തയ്യാറാക്കി സമർപ്പിക്കുന്നതെന്ന് സാക്ഷ്യപ്പെടുത്തുന്നു.",approvalpostingcheckedtext:"നിയമസഭാ സെക്രട്ടറിയുടെ മുൻ‌കൂട്ടിയുള്ള അനുമതിയോടെയാണ് ഈ ഓവർടൈമിന് ജീവനക്കാരെ നിയോഗിച്ചതെന്ന് സാക്ഷ്യപ്പെടുത്തുന്നു."},mounted:function(){var e=navigator.sayswho.toLowerCase();n&&(e="firefox 10");var t=e.indexOf("firefox");if(-1!=t){var o=e.substr(t+7).trim();parseInt(o)<25&&(this.approvaltext="This statement of overtime allowance claim, for overtime duty performed in connection with the "+klasession_for_JS+", is in accordance with the existing Govt order regarding granting of overtime allowance")}},methods:{forwardClick:function(e){if(""!=e){var n=this;this.$swal(t({text:"Forward form to:",input:"select",type:"question",confirmButtonText:'<i class="fa fa-mail-forward"></i> Forward',inputOptions:forwardarray,inputPlaceholder:Object.keys(forwardarray).length>1?"Select":"",inputValue:initalvalue,showCancelButton:!0,showCloseButton:!1,allowOutsideClick:!1,allowEnterKey:!1,focusCancel:!0,inputValidator:function(e){return new Promise((function(t,n){""!=e?t():n("You need to select a person to forward to!")}))},showLoaderOnConfirm:!0,preConfirm:function(e){return new Promise((function(t,n){var o={owner:e};axios.put(urlformforward+"/"+formid,o).then((function(e){e.data.result?t():n("Error, cannot forward")})).catch((function(e){console.log(e.response),n(e.response.data)}))}))}},"allowOutsideClick",!1)).then((function(e){n.$swal({type:"success",html:"Forwarded!",timer:700,useRejections:!1}).then((function(e){window.location.href=urlredirect}))}))}else this.$swal("Please Enter Name","Kindly enter your name in the Profile page first.","error")},submitClick:function(e){if(""!=e)if(dataentry_allowed){var t=this;this.$swal({titleText:"Submit to Accounts:",text:"Are you sure you want to submit this form to Accounts?",type:"question",confirmButtonText:'<i class="fa fa-envelope"></i> Submit',allowEnterKey:!1,showCancelButton:!0,showCloseButton:!1,allowOutsideClick:!1,focusCancel:!0,showLoaderOnConfirm:!0,preConfirm:function(){return new Promise((function(e,t){axios.put(urlformsubmittoaccounts+"/"+formid,{owner:"admin"}).then((function(n){n.data.result?e():t("Error, cannot submit")})).catch((function(e){console.log(e.response),t(e.response.data)}))}))}}).then((function(e){t.$swal({type:"success",html:"Submitted to Accounts!",timer:700,useRejections:!1}).then((function(e){window.location.href=urlredirect}))}))}else this.$swal("Submit","Form submission disabled","error");else this.$swal("Please Enter Name","Kindly enter your name in the Profile page first.","error")},sendbackClick:function(){var e=this;this.$swal({text:"Send back to the form creator?",input:"textarea",type:"question",inputPlaceholder:"Enter remarks if any (max 190 chars)",inputValue:remarks,confirmButtonText:'<i class="fa fa-reply"></i> Send back',allowEnterKey:!1,showCancelButton:!0,showCloseButton:!0,focusCancel:!0,showLoaderOnConfirm:!0,preConfirm:function(e){return new Promise((function(t,n){var o={remarks:e};axios.put(urlformsendback+"/"+formid,o).then((function(e){e.data.result?t():n("Error, cannot send back")})).catch((function(e){console.log(e.response),n(e.response.data)}))}))}}).then((function(t){e.$swal({type:"success",html:"Sent back!",timer:1e3,useRejections:!1}).then((function(e){window.location.href=urlredirect}))}))},sendonelevelbackClick:function(){var e=this;this.$swal({text:"Send back to the previous officer?",input:"textarea",type:"question",inputPlaceholder:"Enter remarks if any (max 190 chars)",inputValue:remarks,confirmButtonText:'<i class="fa fa-reply"></i> Send one level back',allowEnterKey:!1,showCancelButton:!0,showCloseButton:!0,focusCancel:!0,showLoaderOnConfirm:!0,preConfirm:function(e){return new Promise((function(t,n){var o={remarks:e};axios.put(urlformsendonelevelback+"/"+formid,o).then((function(e){e.data.result?t():n("Error, cannot send back")})).catch((function(e){console.log(e.response),n(e.response.data)}))}))}}).then((function(t){e.$swal({type:"success",html:"Sent back!",timer:1e3,useRejections:!1}).then((function(e){window.location.href=urlredirect}))}))},ignoreClick:function(e){var t=this;this.$swal({text:e?"Withhold this form?":"Release?",input:e?"textarea":null,type:"question",inputPlaceholder:"Enter remarks if any (max 190 chars)",inputValue:remarks,confirmButtonText:e?'<i class="fa fa-thumbs-down"></i> Withhold':'<i class="fa fa-thumbs-up"></i> Release',allowEnterKey:!1,showCancelButton:!0,showCloseButton:!0,focusCancel:!0,showLoaderOnConfirm:!0,preConfirm:function(e){return new Promise((function(t,n){var o={remarks:e};axios.put(urlformignore+"/"+formid,o).then((function(e){e.data.result?t():n("Error, cannot ignore")})).catch((function(e){console.log(e.response),n(e.response.data)}))}))}}).then((function(n){t.$swal({type:"success",html:e?"Withheld!":"Released",timer:1e3,useRejections:!1}).then((function(e){window.location.href=urlredirect}))}))}}})})();