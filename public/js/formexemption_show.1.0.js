!function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=51)}({51:function(e,t,n){e.exports=n(52)},52:function(e,t){function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}navigator.sayswho=function(){var e,t=navigator.userAgent,n=t.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i)||[];return/trident/i.test(n[1])?(e=/\brv[ :]+(\d+)/g.exec(t)||[],"IE "+(e[1]||"")):"Chrome"===n[1]&&null!=(e=t.match(/\b(OPR|Edge)\/(\d+)/))?e.slice(1).join(" ").replace("OPR","Opera"):(n=n[2]?[n[1],n[2]]:[navigator.appName,navigator.appVersion,"-?"],null!=(e=t.match(/version\/(\d+)/i))&&n.splice(1,1,e[1]),n.join(" "))}();var r=navigator.userAgent.toLowerCase(),o=r.indexOf("windows nt 5.1")>0;Vue.use(VueSweetAlert.default);new Vue({el:"#app",data:{agreechecked:!1,approvaltext:malkla+" കേരള നിയമസഭയുടെ  "+sessionnumber+"-ാം സമ്മേളനത്തോടനുബന്ധിച്ച് അധികജോലിക്കു നിയോഗിക്കപ്പെട്ട ജീവനക്കാർക്ക്  ഓവർടൈം അലവൻസ് അനുവദിക്കുന്നതിനുള്ള ഈ ഓവർടൈം അലവൻസ്   സ്റ്റേറ്റ്മെന്റ്,   ഓവർടൈം അലവൻസ് അനുവദിക്കുന്നതിനായുള്ള നിലവിലെ സർക്കാർ ഉത്തരവിൽ  നിഷ്കർഷിച്ചിരിക്കുന്ന  നിബന്ധനകൾ  പാലിച്ചു തന്നെയാണ്  തയ്യാറാക്കി സമർപ്പിക്കുന്നതെന്ന് സാക്ഷ്യപ്പെടുത്തുന്നു."},mounted:function(){var e=navigator.sayswho.toLowerCase();o&&(e="firefox 10");var t=e.indexOf("firefox");if(-1!=t){var n=e.substr(t+7).trim();parseInt(n)<25&&(this.approvaltext="This statement of overtime allowance claim, for overtime duty performed in connection with the "+klasession_for_JS+", is in accordance with the existing Govt order regarding granting of overtime allowance")}},methods:{forwardClick:function(e){if(""==e)return void this.$swal("Please Enter Name","Kindly enter your name in the Profile page first.","error");var t=this;this.$swal(n({text:"Forward form to:",input:"select",type:"question",confirmButtonText:'<i class="fa fa-mail-forward"></i> Forward',inputOptions:forwardarray,inputPlaceholder:Object.keys(forwardarray).length>1?"Select":"",inputValue:initalvalue,showCancelButton:!0,showCloseButton:!1,allowOutsideClick:!1,allowEnterKey:!1,focusCancel:!0,inputValidator:function(e){return new Promise(function(t,n){""!=e?t():n("You need to select a person to forward to!")})},showLoaderOnConfirm:!0,preConfirm:function(e){return new Promise(function(t,n){var r={owner:e};axios.put(urlformforward+"/"+formid,r).then(function(e){e.data.result?t():n("Error, cannot forward")}).catch(function(e){n(e.response.data)})})}},"allowOutsideClick",!1)).then(function(e){t.$swal({type:"success",html:"Forwarded!",timer:1500,useRejections:!1}).then(function(e){window.location.href=urlredirect})})},submitClick:function(e){if(""==e)return void this.$swal("Please Enter Name","Kindly enter your name in the Profile page first.","error");if(!dataentry_allowed)return void this.$swal("Submit","Form submission disabled","error");var t=this;this.$swal({titleText:"Submit to Services-A:",text:"Are you sure you want to submit this form?",type:"question",confirmButtonText:'<i class="fa fa-envelope"></i> Submit',allowEnterKey:!1,showCancelButton:!0,showCloseButton:!1,focusCancel:!0,showLoaderOnConfirm:!0,preConfirm:function(){return new Promise(function(e,t){var n={owner:"admin"};axios.put(urlformsubmittoaccounts+"/"+formid,n).then(function(n){n.data.result?e():t("Error, cannot submit")}).catch(function(e){t(e.response.data)})})}}).then(function(e){t.$swal({type:"success",html:"Submitted to Services!",timer:1500,useRejections:!1}).then(function(e){window.location.href=urlredirect})})},sendbackClick:function(){var e=this;this.$swal({text:"Send back to the form creator?",input:"textarea",type:"question",inputPlaceholder:"Enter remarks if any (max 190 chars)",inputValue:remarks,confirmButtonText:'<i class="fa fa-reply"></i> Send back',allowEnterKey:!1,showCancelButton:!0,showCloseButton:!0,focusCancel:!0,showLoaderOnConfirm:!0,preConfirm:function(e){return new Promise(function(t,n){var r={remarks:e};axios.put(urlformsendback+"/"+formid,r).then(function(e){e.data.result?t():n("Error, cannot send back")}).catch(function(e){n(e.response.data)})})}}).then(function(t){e.$swal({type:"success",html:"Sent back!",timer:1500,useRejections:!1}).then(function(e){window.location.href=urlredirect})})},ignoreClick:function(e){var t=this;this.$swal({text:e?"Withhold this form?":"Release?",input:e?"textarea":null,type:"question",inputPlaceholder:"Enter remarks if any (max 190 chars)",inputValue:remarks,confirmButtonText:e?'<i class="fa fa-thumbs-down"></i> Withhold':'<i class="fa fa-thumbs-up"></i> Release',allowEnterKey:!1,showCancelButton:!0,showCloseButton:!0,focusCancel:!0,showLoaderOnConfirm:!0,preConfirm:function(e){return new Promise(function(t,n){var r={remarks:e};axios.put(urlformignore+"/"+formid,r).then(function(e){e.data.result?t():n("Error, cannot ignore")}).catch(function(e){n(e.response.data)})})}}).then(function(n){t.$swal({type:"success",html:e?"Withheld!":"Released",timer:1e3,useRejections:!1}).then(function(e){window.location.href=urlredirect})})}}})}});